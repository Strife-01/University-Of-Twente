#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>

#define DIRECT_BITS 16
#define DIRECT_SIZE (1 << DIRECT_BITS)

// Forward declaration
void ip2human(unsigned int ip);

class CompressedTrie {
private:
    struct Node {
        int port;
        Node* children[2];

        Node() : port(-1) {
            children[0] = nullptr;
            children[1] = nullptr;
        }
    };

    std::vector<Node*> direct_table;

public:
    CompressedTrie() : direct_table(DIRECT_SIZE, nullptr) {}

    ~CompressedTrie() {
        // Cleanup direct table
        for (auto& entry : direct_table) {
            if (entry) {
                freeNode(entry);
            }
        }
    }

    void freeNode(Node* node) {
        if (!node) return;
        if (node->children[0]) freeNode(node->children[0]);
        if (node->children[1]) freeNode(node->children[1]);
        delete node;
    }

    void addRoute(unsigned int ip, int prefix_length, int port_number) {
        // Handle direct table routes
        if (prefix_length <= DIRECT_BITS) {
            unsigned int mask = 0xFFFFFFFF << (32 - prefix_length);
            unsigned int prefix = ip & mask;
            unsigned int start = prefix >> (32 - DIRECT_BITS);
            unsigned int count = 1 << (DIRECT_BITS - prefix_length);

            for (unsigned int i = 0; i < count; i++) {
                unsigned int idx = start + i;
                if (idx < DIRECT_SIZE) {
                    if (!direct_table[idx]) {
                        direct_table[idx] = new Node();
                    }
                    direct_table[idx]->port = port_number;
                }
            }
            return;
        }

        // Handle trie routes beyond direct table
        unsigned int direct_index = ip >> (32 - DIRECT_BITS);
        if (direct_index >= DIRECT_SIZE) return;

        // Ensure direct table entry exists
        if (!direct_table[direct_index]) {
            direct_table[direct_index] = new Node();
        }

        Node* node = direct_table[direct_index];

        // Traverse/create trie for longer prefix routes
        for (int i = DIRECT_BITS; i < prefix_length && node; i++) {
            int bit = (ip >> (31 - i)) & 1;

            if (!node->children[bit]) {
                node->children[bit] = new Node();
            }

            node = node->children[bit];
        }

        // Set port for the final node
        if (node) {
            node->port = port_number;
        }
    }

    int lookupIP(unsigned int ip) const {
        unsigned int direct_index = ip >> (32 - DIRECT_BITS);

        if (direct_index >= DIRECT_SIZE || !direct_table[direct_index]) {
            return -1;
        }

        Node* node = direct_table[direct_index];
        int best_match = node->port;

        // Traverse trie for more specific matches
        for (int i = DIRECT_BITS; i < 32 && node; i++) {
            // Update best match if current node has a valid port
            if (node->port != -1) {
                best_match = node->port;
            }

            // Move to next level in trie
            int bit = (ip >> (31 - i)) & 1;
            node = node->children[bit];
        }

        // Check final node for potential match
        if (node && node->port != -1) {
            best_match = node->port;
        }

        return best_match;
    }
};

// Global routing table
CompressedTrie* routing_table = nullptr;

void init() {
    routing_table = new CompressedTrie();
}

void add_route(unsigned int ip, int prefix_length, int port_number) {
    if (routing_table) {
        routing_table->addRoute(ip, prefix_length, port_number);
    }
}

int lookup_ip(unsigned int ip) {
    return routing_table ? routing_table->lookupIP(ip) : -1;
}

void finalize_routes() {
}

void ip2human(unsigned int ip) {
    unsigned int a, b, c, d;

    a = (ip >> 24) & 0xff;
    b = (ip >> 16) & 0xff;
    c = (ip >>  8) & 0xff;
    d =  ip        & 0xff;

    printf("%i.%i.%i.%i\n", a, b, c, d);
}